/*
 C 2011 grammar built from the C11 Spec 
 * 
 * The grammar is based on the file of following Github:
 * https://github.com/antlr/grammars-v4/blob/master/c/C.g4
 * 
 * All comments that start with "///" are copy-pasted from
 * The C Language Reference
 * 
 */
	
grammar C;

// Parser rules

//Declaration
declaration
    :   declarationSpecifiers initDeclaratorList ';'
	| 	declarationSpecifiers ';'
	;

declarationSpecifiers
    :   typeSpecifier+
    ;
    
typeSpecifier
    :   ('void'
    |   'char'
    |   'short'//
    |   'int'
    |   'long'//
    |   'float'//
    |   'double'//
    |   '_Bool')
//    |   enumSpecifier//
    |   Identifier
    ;    
    
//enumSpecifier
//    :   'enum' Identifier? '{' enumeratorList '}'
//    |   'enum' Identifier? '{' enumeratorList ',' '}'
//    |   'enum' Identifier
//    ;
//
//enumeratorList
//    :   enumerator
//    |   enumeratorList ',' enumerator
//    ;
//
//enumerator
//    :   enumerationConstant
//    |   enumerationConstant '=' constantExpression
//    ;
    
initDeclaratorList
    :   initDeclarator
    |   initDeclaratorList ',' initDeclarator
    ;

initDeclarator
    :   directDeclarator
    |   directDeclarator '=' initializer
    ;
    
initializer
    :   assignmentExpression
    |   '{' initializerList '}'
    |   '{' initializerList ',' '}'
    ;

initializerList
    :   initializer
    |   initializerList ',' initializer
    ;
    
directDeclarator
    :   Identifier
    |   '(' directDeclarator ')'
    |   directDeclarator '(' parameterTypeList ')'
    |   directDeclarator '(' identifierList? ')'
    ;    

identifierList
    :   Identifier
    |   identifierList ',' Identifier
    ;
    
parameterTypeList
    :   parameterList
    |   parameterList ',' '...'
    ;

parameterList
    :   parameterDeclaration
    |   parameterList ',' parameterDeclaration
    ;

parameterDeclaration
    :   declarationSpecifiers directDeclarator
    ;
    
//Expression	

primaryExpression
    :   Identifier
    |   '(' expression ')'
    ;
    
expression
    :   assignmentExpression
    |   expression ',' assignmentExpression
    ;
    
assignmentExpression
    :   conditionalExpression
    |   unaryExpression assignmentOperator assignmentExpression
    ;
    
assignmentOperator
    :   '=' 
    ;

conditionalExpression
    :   equalityExpression ('?' expression ':' conditionalExpression)?
    ;

equalityExpression
    :   relationalExpression
    |   equalityExpression '==' relationalExpression
    |   equalityExpression '!=' relationalExpression
    ;

relationalExpression
    :   additiveExpression
    |   relationalExpression '<' additiveExpression
    |   relationalExpression '>' additiveExpression
    ;

additiveExpression
    :   multiplicativeExpression
    |   additiveExpression '+' multiplicativeExpression
    |   additiveExpression '-' multiplicativeExpression
    ;
    
multiplicativeExpression
    :   castExpression
    |   multiplicativeExpression '*' castExpression
    |   multiplicativeExpression '/' castExpression
    ;
    
castExpression
    :   '(' typeName ')' castExpression
    |   unaryExpression
    ;
    
unaryExpression
    :   postfixExpression
    |   '++' unaryExpression
    |   '--' unaryExpression
    |   unaryOperator castExpression
    |   'sizeof' unaryExpression
    |   'sizeof' '(' typeName ')'
    ;

unaryOperator
    :   '&' | '*' | '+' | '-' | '~' | '!'
    ;
    
typeName
    :   specifierQualifierList 
    ;
    
specifierQualifierList
    :   typeSpecifier specifierQualifierList?
    ;

postfixExpression
    :   primaryExpression
    |   postfixExpression '[' expression ']'
    |   postfixExpression '(' argumentExpressionList? ')'
    |   postfixExpression '++'
    |   postfixExpression '--'
    ;
    
argumentExpressionList
    :   assignmentExpression
    |   argumentExpressionList ',' assignmentExpression
    ;

//Statement

statement
    :   compoundStatement
    |   expressionStatement
    |   selectionStatement
    |   iterationStatement
    ;
    
compoundStatement
    :   '{' blockItemList? '}'
    ;

blockItemList
    :   blockItem
    |   blockItemList blockItem
    ;

blockItem
    :   statement
    |   declaration
    ;
    
expressionStatement
    :   expression? ';'
    ;
    
selectionStatement
    :   'if' '(' expression ')' 
    		statement ('else' statement)?		# if
    ;
    
iterationStatement
    :   While '(' expression ')' statement      # while
    ;

// Lexicon
Char : 'char';
Else : 'else';
If : 'if';
Int : 'int';
Return : 'return';
While : 'while';

Equal : '==';
Less : '<';
Greater : '>';
Plus : '+';
Minus : '-';
Star : '*';
Div : '/';

Assign : '=';

LeftParen : '(';
RightParen : ')';
LeftBrace : '{';
RightBrace : '}';
Colon : ':';
Semi : ';';

Identifier
    :   Nondigit
        (   Nondigit
        |   Digit
        )*
    ;

fragment
Nondigit
    :   [a-zA-Z_]
    ;

fragment
Digit
    :   [0-9]
    ;
    Whitespace
    :   [ \t]+
        -> skip
    ;

Newline
    :   (   '\r' '\n'?
        |   '\n'
        )
        -> skip
    ;

BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;

LineComment
    :   '//' ~[\r\n]*
        -> skip
;