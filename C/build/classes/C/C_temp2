/*
 C 2011 grammar built from the C11 Spec 
 * 
 * The grammar is based on the file of following Github:
 * https://github.com/antlr/grammars-v4/blob/master/c/C.g4
 * 
 * All comments that start with "///" are copy-pasted from
 * The C Language Reference
 * 
 */
	
grammar C;

// Parser rules

//Declaration
externalDeclaration
    :   functionDefinition
    |   ('void' | 'char' | 'int' | '_Bool')+ initDeclaratorList ';'
    |   ';' 
    ;
    
initDeclaratorList
    :   (directDeclarator | directDeclarator '=' assignmentExpression)
    |   initDeclaratorList ',' (directDeclarator | directDeclarator '=' assignmentExpression)
    ;

directDeclarator
    :   Identifier
    |   '(' directDeclarator ')'
    |   directDeclarator '(' parameterList ')'
    |   directDeclarator '(' identifierList? ')'
    ;    
    
identifierList
    :   Identifier
    |   identifierList ',' Identifier
    ;

parameterList
    :   ('void' | 'char' | 'int' | '_Bool')+ directDeclarator
    |   parameterList ',' ('void' | 'char' | 'int' | '_Bool')+ directDeclarator
    ;
    
functionDefinition
    :   (('void' | 'char' | 'int' | '_Bool')+)? directDeclarator '{' blockItemList? '}'
    ;

blockItemList
    :   (statement | ('void' | 'char' | 'int' | '_Bool')+ initDeclaratorList ';')
    |   blockItemList (statement | ('void' | 'char' | 'int' | '_Bool')+ initDeclaratorList ';')
    ;
   
//Expression	

primaryExpression
    :   Identifier
    |   '(' expression ')'
    ;
    
expression
    :   assignmentExpression
    |   expression ',' assignmentExpression
    ;
    
assignmentExpression
    :   relationalExpression
    |   assignmentExpression '==' relationalExpression
    |   assignmentExpression '!=' relationalExpression
    ;

relationalExpression
    :   additiveExpression
    |   relationalExpression '<' additiveExpression
    |   relationalExpression '>' additiveExpression
    ;

additiveExpression
    :   multiplicativeExpression
    |   additiveExpression '+' multiplicativeExpression
    |   additiveExpression '-' multiplicativeExpression
    ;
    
multiplicativeExpression
    :   castExpression
    |   multiplicativeExpression '*' castExpression
    |   multiplicativeExpression '/' castExpression
    ;
    
castExpression
    :   '(' ('void' | 'char' | 'int' | '_Bool')? ')' castExpression
    ;

//Statement
statement
    :   '{' blockItemList? '}'
    |   expression? ';'
    |   'if' '(' expression ')' statement ('else' statement)?		
    |   While '(' expression ')' statement      
    ;
   
// Lexicon
Char : 'char';
Else : 'else';
If : 'if';
Int : 'int';
Return : 'return';
While : 'while';

Equal : '==';
Less : '<';
Greater : '>';
Plus : '+';
Minus : '-';
Star : '*';
Div : '/';

Assign : '=';

LeftParen : '(';
RightParen : ')';
LeftBrace : '{';
RightBrace : '}';
Colon : ':';
Semi : ';';

Identifier
    :   Nondigit
        (   Nondigit
        |   Digit
        )*
    ;

fragment
Nondigit
    :   [a-zA-Z_]
    ;

fragment
Digit
    :   [0-9]
    ;

Whitespace
    :   [ \t]+
        -> skip
    ;

Newline
    :   (   '\r' '\n'?
        |   '\n'
        )
        -> skip
    ;

BlockComment
    :   '/*' .*? '*/'
        -> skip
    ;

LineComment
    :   '//' ~[\r\n]*
        -> skip
;